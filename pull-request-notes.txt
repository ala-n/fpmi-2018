Памятка по исполнению заданий:

Задание выполнем в отдельных ветках.
Ветки называем соответствующим образом, чтобы не возникло вопросов о их содержании.

Для работы с ветками используем команду git checkout

Чтобы создать ветку с текущего состояния (коммита) репозитория используется комманда:
git checkout -b {Название ветки}

Чтобы переключится между ветками/коммитами/тегами используем чистую комманду
git checkout {Название ветки|хэш коммита|имя тега}

См https://git-scm.com/book/ru/v1/Ветвление-в-Git-Что-такое-ветка%3F  для деталей.

Псле того как задание в ветке сделано (все коммиты сделаны) и ветка синхронизированна с удаленным репозиторием 
(git push {короткое имя репозитория} {имя ветки}) необходимо создать Pull Request.

Pull Request(PR) это процесс согласованного слияния ветки. Команда проверяет изменения внесенные в ветке, 
оставляет коментарии о возможных проблемах, найденных ошибках и опечатках. После того как комманда утвеждает PR происходит непосредственно
слияние веток.

PR создается в GitHub кнопкой "New Pull Request" 
Далее указывается base ветка (куда мержим), на практике это будет ветка master
и текущая ветка (откуда мержим)

Если до этого момента все выполнено верно то вы увидите форму с где нужно ввести название и описание PRа
а чуть ниже будут показаны изменения которые вы переносите (с возможностью комментариев каждой строчки изменений)

ПОМИМО НАЗВАНИЯ И ОПИСАНИЯ ДОБАВЛЯЮТСЯ REVIEWER-ы (на практике это кураторы) в список на панели справа.

Добавлять можно как после создания PR так и в момент создания.

Для того чтобы кураторы были доступны для выбора в списке ревьюеров нужно добавить их GitHub ники в список коллабораторов в 
настройках проекта:
Settings (вкладка доступна когда выбран репозиторий) -> Collaborators -> Add
Ники кураторов можно посмотреть в списке Watchers (куратры уже должны были отметится там) или в общей табличке группы.

PS: C момента 3 задания('Верстка') можно пользоваться инструментами IDE для работы с Git

PPS: Итого алгоритм исполнения задания :)

gitBash.do('git checkout -b task-N ');

while ( !task.isCompleted() ) {
  doWork();
  gitBash.do('git commit -m"Done a great pice of work"');
  
  // gitBash.do('git push origin task-N'); - if u whant to (but not needed if u work on single PC)
}

gitBash.do('git push origin task-N');

browser.open('github.com/nick/repositoryName');
browser.click('New pull request');

var pr = browser.get('form');
pr.checkChanges();
pr.fill('PR Name');
pr.fill('Description');
pr.reviewers.add(['ala-n', 'djadjka']);
pr.submit();

while(pr.haveCriticalIssues()) {
  doRework();
  gitBash.do('git commit -m"Rework my mistake"');  
  gitBash.do('git push origin task-N'); // PR will be updated automatically
}

get('mark');
beHappy();
